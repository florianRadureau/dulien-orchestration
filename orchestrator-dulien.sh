#!/bin/bash
# orchestrator-dulien.sh
# Orchestrateur automatique des agents Dulien via Claude Code CLI
set -e

# Configuration PATH pour cron (assurer acc√®s √† claude CLI)
export PATH="/home/florian/.nvm/versions/node/v22.18.0/bin:$PATH"

# Configuration
WORK_DIR="/home/florian/projets/dulien-orchestration"
WORKFLOW_FILE="$WORK_DIR/workflow.json"
AGENTS_DIR="$WORK_DIR/agents"
LOG_FILE="$WORK_DIR/logs/orchestrator.log"
ORG="mentorize-app"
REPO="infrastructure"

# GitHub App Authentication
source "$WORK_DIR/github-auth.sh"

get_github_token() {
    # Utiliser GitHub App au lieu du token personnel
    get_installation_token
}

# Initialiser le token GitHub pour MCP
GITHUB_TOKEN=$(get_github_token)
export GITHUB_TOKEN

# Cr√©er structure si n√©cessaire
mkdir -p "$WORK_DIR"/{agents,logs,temp}

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# === CONFIGURATION AGENTS MCP ===

init_agents_config() {
    log "üîß Initialisation configuration agents..."
    
    # Tech Lead Agent - avec chemin correct vers business-context-mcp et token dynamique
    cat > "$AGENTS_DIR/tech-lead.json" << EOF
{
  "mcpServers": {
    "github": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-github"],
      "env": {
        "GITHUB_PERSONAL_ACCESS_TOKEN": "${GITHUB_TOKEN}"
      }
    },
    "business-context": {
      "command": "node",
      "args": ["${HOME}/projets/business-context-mcp/dist/index.js"]
    }
  }
}
EOF

    # Webapp Agent  
    cat > "$AGENTS_DIR/webapp.json" << 'EOF'
{
  "mcpServers": {
    "github": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-github"],
      "env": {
        "GITHUB_PERSONAL_ACCESS_TOKEN": "${GITHUB_TOKEN}"
      }
    },
    "business-context": {
      "command": "node", 
      "args": ["../business-context-mcp/dist/index.js"]
    },
    "accessibility": {
      "command": "npx",
      "args": ["-y", "a11y-mcp"]
    }
  }
}
EOF

    # Tenant API Agent
    cat > "$AGENTS_DIR/tenant-api.json" << 'EOF' 
{
  "mcpServers": {
    "github": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-github"],
      "env": {
        "GITHUB_PERSONAL_ACCESS_TOKEN": "${GITHUB_TOKEN}"
      }
    },
    "business-context": {
      "command": "node",
      "args": ["../business-context-mcp/dist/index.js"]
    }
  }
}
EOF

    # Security Agent
    cat > "$AGENTS_DIR/security.json" << 'EOF'
{
  "mcpServers": {
    "github": {
      "command": "npx", 
      "args": ["-y", "@modelcontextprotocol/server-github"],
      "env": {
        "GITHUB_PERSONAL_ACCESS_TOKEN": "${GITHUB_TOKEN}"
      }
    }
  }
}
EOF

    log "‚úÖ Configuration agents initialis√©e"
}

# === D√âTECTION NOUVELLES √âPICS ===

check_new_epics() {
    log "üîç V√©rification nouvelles √©pics..."
    
    # Test connectivit√© GitHub d'abord
    if ! gh auth status >/dev/null 2>&1; then
        log "‚ùå GitHub CLI non authentifi√©. Lancez: gh auth login"
        return 1
    fi
    
    # Test acc√®s au repo
    if ! gh repo view "$ORG/$REPO" >/dev/null 2>&1; then
        log "‚ùå Repo $ORG/$REPO inaccessible. V√©rifiez les permissions."
        return 1
    fi
    
    # R√©cup√©rer toutes les issues √©pics d'abord (plus permissif)
    log "üîé Recherche des √©pics dans $ORG/$REPO..."
    
    ALL_EPICS=$(gh issue list \
        --repo "$ORG/$REPO" \
        --state open \
        --json number,title,labels,createdAt 2>/dev/null)
    
    if [ "$?" -ne 0 ] || [ -z "$ALL_EPICS" ] || [ "$ALL_EPICS" = "null" ]; then
        log "üì≠ Aucune issue trouv√©e dans le repo"
        return 0
    fi
    
    log "üìä $(echo "$ALL_EPICS" | jq length) issues trouv√©es au total"
    
    # Filtrer les √©pics non trait√©es (v√©rifier dans workflow.json au lieu des labels)
    NEW_EPICS=$(echo "$ALL_EPICS" | jq -c --slurpfile workflow "$WORKFLOW_FILE" '
        .[] | 
        select(.title | test("\\[EPIC\\]"; "i")) |
        select(($workflow[0].epics[.number | tostring] // null) == null)
    ' 2>/dev/null || echo "$ALL_EPICS" | jq -c '.[] | select(.title | test("\\[EPIC\\]"; "i"))')
    
    if [ -z "$NEW_EPICS" ]; then
        log "üì≠ Aucune nouvelle √©pic √† traiter"
        return 0
    fi
    
    # Trier par num√©ro croissant et traiter
    echo "$NEW_EPICS" | jq -s 'sort_by(.number)' | jq -c '.[]' | while read -r epic; do
        EPIC_NUMBER=$(echo "$epic" | jq -r '.number')
        EPIC_TITLE=$(echo "$epic" | jq -r '.title')
        
        log "üìã Nouvelle √©pic d√©tect√©e: #$EPIC_NUMBER - $EPIC_TITLE"
        
        # D√©clencher analyse Tech Lead
        analyze_epic "$EPIC_NUMBER"
    done
}

# === EXTRACTION JSON ROBUSTE ===

extract_json() {
    local input="$1"
    local result=""
    
    # Method 1: Extraction depuis le nouveau format Claude Code --output-format json
    if echo "$input" | jq . >/dev/null 2>&1; then
        # V√©rifier si c'est une r√©ponse Claude Code avec succ√®s
        if echo "$input" | jq -e '.subtype == "success"' >/dev/null 2>&1; then
            # Extraire le champ "result" et chercher le JSON dedans
            result=$(echo "$input" | jq -r '.result' 2>/dev/null | sed -n '/```json/,/```/p' | sed '1d;$d' | head -c 10000)
            if [ -n "$result" ] && echo "$result" | jq . >/dev/null 2>&1; then
                echo "$result"
                return 0
            fi
        elif echo "$input" | jq -e '.subtype == "error_during_execution"' >/dev/null 2>&1; then
            log "‚ùå Claude a rencontr√© une erreur d'ex√©cution (probablement MCP)"
            return 1
        fi
    fi
    
    # Method 2: Simple sed extraction entre ```json markers (ancien format)
    result=$(echo "$input" | sed -n '/```json/,/```/p' | sed '1d;$d' | head -c 10000)
    if [ -n "$result" ] && echo "$result" | jq . >/dev/null 2>&1; then
        echo "$result"
        return 0
    fi
    
    # Method 3: awk extraction
    result=$(echo "$input" | awk '/```json/,/```/ {if (!/```/) print}' | head -c 10000)
    if [ -n "$result" ] && echo "$result" | jq . >/dev/null 2>&1; then
        echo "$result"
        return 0
    fi
    
    # Method 4: JSON pur apr√®s lignes de log (pour create_github_issues)
    result=$(echo "$input" | awk '/^{/ {p=1} p {print}' | head -c 10000)
    if [ -n "$result" ] && echo "$result" | jq . >/dev/null 2>&1; then
        echo "$result"
        return 0
    fi
    
    log "‚ùå √âchec extraction JSON avec toutes les m√©thodes"
    return 1
}

# === BUSINESS CONTEXT ===

load_business_context() {
    local context_dir="/home/florian/projets/business-context-mcp/src/data"
    local business_context=""
    
    # Charger les r√®gles m√©tier
    if [ -f "$context_dir/business-rules.json" ]; then
        business_context="$business_context

=== R√àGLES M√âTIER DULIEN/MENTORIZE ===
$(jq -r '.domains | to_entries[] | "## \(.key | ascii_upcase)\n\(.value.description)\n\n" + (.value.rules | to_entries[] | "### \(.key)\n- **Description**: \(.value.description)\n- **Conditions**: \(.value.conditions | join(", "))\n- **Actions**: \(.value.actions | join(", "))\n")' "$context_dir/business-rules.json" 2>/dev/null || echo "Business rules disponibles")"
    fi
    
    # Charger les patterns techniques
    if [ -f "$context_dir/patterns.json" ]; then
        business_context="$business_context

=== PATTERNS TECHNIQUES DULIEN ===
$(jq -r '.patterns | to_entries[] | "## \(.key | ascii_upcase)\n\(.value.description)\n\n" + (.value.patterns | to_entries[] | "### \(.value.name)\n\(.value.description)\n**Tech**: \(.value.technology // "N/A")\n")' "$context_dir/patterns.json" 2>/dev/null || echo "Patterns techniques disponibles")"
    fi
    
    # Charger le glossaire
    if [ -f "$context_dir/glossary.json" ]; then
        business_context="$business_context

=== GLOSSAIRE M√âTIER ===
$(jq -r '.glossary | to_entries[] | "**\(.key)**: \(.value.definition)"' "$context_dir/glossary.json" 2>/dev/null || echo "Glossaire m√©tier disponible")"
    fi
    
    echo "$business_context"
}

# === AGENT TECH LEAD ===

analyze_epic() {
    local epic_number="$1"
    log "ü§ñ D√©marrage analyse Tech Lead pour √©pic #$epic_number"
    
    # R√©cup√©rer d√©tails de l'√©pic
    EPIC_DATA=$(gh issue view "$epic_number" --repo "$ORG/$REPO" --json title,body,labels)
    
    # R√©cup√©rer les donn√©es de l'√©pic
    local epic_title=$(echo "$EPIC_DATA" | jq -r '.title')
    local epic_body=$(echo "$EPIC_DATA" | jq -r '.body')
    
    # Prompt Tech Lead Agent
    TECH_LEAD_PROMPT="Tu es le Tech Lead Agent de Dulien. Tu dois analyser cette √©pic et planifier les t√¢ches techniques.

EPIC #$epic_number: $epic_title

DESCRIPTION:
$epic_body

IMPORTANT:
1. Tu dois SEULEMENT analyser et planifier - ne cr√©e pas d'issues GitHub
2. Tu DOIS retourner le r√©sultat au format JSON exact ci-dessous  
3. Utilise le business-context MCP pour comprendre le contexte m√©tier
4. Les num√©ros d'issues seront g√©n√©r√©s automatiquement apr√®s ton analyse

REPOS DISPONIBLES:
- webapp (Angular/TypeScript) ‚Üí agent: webapp
- tenant-specific-api (NestJS) ‚Üí agent: tenant-api  
- referencial (NestJS) ‚Üí agent: referencial
- mail-server (Node.js) ‚Üí agent: mail-server
- landing-page (Next.js) ‚Üí agent: landing-page
- infrastructure (DevOps) ‚Üí agent: infrastructure

Tu DOIS terminer ta r√©ponse par ce JSON exact:

\`\`\`json
{
  \"analysis\": \"Description technique de l'impact\",
  \"tasks_to_create\": [
    {\"repo\": \"webapp\", \"title\": \"Titre de la t√¢che\", \"agent\": \"webapp\"},
    {\"repo\": \"tenant-specific-api\", \"title\": \"Autre t√¢che\", \"agent\": \"tenant-api\"}
  ],
  \"workflow\": [
    {\"task_id\": \"webapp-TBD\", \"depends_on\": [], \"priority\": 1},
    {\"task_id\": \"tenant-api-TBD\", \"depends_on\": [\"webapp-TBD\"], \"priority\": 2}
  ]
}
\`\`\`

Commence maintenant l'analyse et la cr√©ation des t√¢ches."

    # R√©cup√©rer le token GitHub pour Tech Lead Agent
    if [ -z "$GITHUB_TOKEN" ]; then
        export GITHUB_TOKEN=$(get_github_token)
        if [ -z "$GITHUB_TOKEN" ]; then
            log "‚ùå Impossible de r√©cup√©rer GITHUB_TOKEN pour Tech Lead Agent"
            return 1
        fi
    fi
    
    # === INSTRUMENTATION DIAGNOSTIC ===
    log "üîç DEBUG: Sauvegarde contexte avant appel Claude Code"
    echo "$TECH_LEAD_PROMPT" > "$WORK_DIR/temp/prompt-sent-$epic_number.txt"
    echo "$EPIC_DATA" > "$WORK_DIR/temp/epic-data-$epic_number.json" 
    env | grep -E "(GITHUB|PATH)" > "$WORK_DIR/temp/environment-$epic_number.txt"
    log "üîç DEBUG: Prompt length: $(echo "$TECH_LEAD_PROMPT" | wc -c) characters"
    
    # Charger le business context et le sauvegarder dans un fichier
    log "üîç DEBUG: Cr√©ation system prompt simplifi√© avec MCP"
    
    # Cr√©er un system prompt SIMPLIFI√â utilisant les MCP directement  
    cat > "$WORK_DIR/temp/system-prompt-$epic_number.txt" << 'EOF'
Tu es le Tech Lead Agent Dulien. Tu analyses les √©pics et cr√©es les t√¢ches techniques distribu√©es.

AVANT DE R√âPONDRE, tu DOIS obligatoirement :
1. Utiliser technical_context__get_page_structure pour analyser la page concern√©e
2. Utiliser technical_context__search_similar_components pour identifier les composants existants
3. Utiliser business_context__search_glossary si n√©cessaire pour le contexte m√©tier

‚ÑπÔ∏è Tu as acc√®s aux serveurs MCP Dulien pour obtenir dynamiquement le contexte technique et m√©tier.

INSTRUCTIONS CRITIQUES OBLIGATOIRES:

1. **CR√âER UNE SEULE T√ÇCHE PAR √âPIC** (pas 4 ou 5 t√¢ches s√©par√©es!)
2. **ANALYSER LE CODE EXISTANT** avant de proposer des solutions
3. **R√âUTILISER LES COMPOSANTS EXISTANTS** (AuthInterceptor, EmptyStateComponent, etc.)
4. **BODY D√âTAILL√â OBLIGATOIRE** avec sous-t√¢ches techniques num√©rot√©es

R√àGLES STRICTES:
- Maximum 1-2 t√¢ches dans "tasks_to_create" (id√©alement 1 seule)
- Le champ "body" est OBLIGATOIRE et doit contenir :
  - Contexte technique avec fichiers existants √† modifier
  - Liste de sous-t√¢ches num√©rot√©es (minimum 5-10 sous-t√¢ches)
  - R√©f√©rences pr√©cises aux composants/services existants
  - Acceptance criteria techniques

Structure JSON OBLIGATOIRE:
{
  "analysis": "Description technique d√©taill√©e de l'√©pic avec contexte architectural",
  "tasks_to_create": [
    {
      "repo": "webapp",
      "title": "Titre r√©sumant TOUT le besoin fonctionnel", 
      "agent": "webapp",
      "body": "## üéØ Objectif\n[Description du besoin]\n\n## üìù Contexte technique\n[Composants existants, architecture]\n\n## ‚úÖ Sous-t√¢ches √† r√©aliser\n\n- [ ] 1. [Premi√®re sous-t√¢che avec fichier sp√©cifique]\n- [ ] 2. [Deuxi√®me sous-t√¢che]\n- [ ] 3. [Troisi√®me sous-t√¢che]\n[...minimum 5-10 sous-t√¢ches...]\n\n## üìÅ Fichiers √† modifier\n- `path/to/file1.ts` : [description]\n- `path/to/file2.ts` : [description]\n\n## üîç Acceptance Criteria\n- [Crit√®re 1]\n- [Crit√®re 2]\n\n## ‚ö†Ô∏è Points d'attention\n[Risques, d√©pendances, etc.]"
    }
  ],
  "workflow": [
    {
      "task_id": "webapp-TBD",
      "depends_on": [],
      "priority": 1
    }
  ]
}

R√âPONDS UNIQUEMENT AVEC CE JSON, RIEN D'AUTRE.
EOF
    
    # Sauvegarder le prompt dans un fichier pour √©viter les probl√®mes d'√©chappement
    echo "$TECH_LEAD_PROMPT" > "$WORK_DIR/temp/prompt-sent-$epic_number.txt"
    
    # Validation du prompt envoy√©
    if grep -q "CR√âER UNE SEULE T√ÇCHE PAR √âPIC" "$WORK_DIR/temp/system-prompt-$epic_number.txt"; then
        log "‚úÖ Validation: Instructions '1 t√¢che par √©pic' pr√©sentes dans le prompt"
    else
        log "‚ùå ERREUR: Instructions '1 t√¢che par √©pic' MANQUANTES dans le prompt!"
        echo "PROMPT_VALIDATION_FAILED: Missing task limit instruction" >> "$WORK_DIR/temp/validation-error.txt"
    fi
    
    # Cr√©er un script temporaire avec syntaxe Claude Code correcte
    cat > "$WORK_DIR/temp/claude-cmd-$epic_number.sh" << 'EOF'
#!/bin/bash
WORK_DIR="/home/florian/projets/dulien-orchestration"
EPIC_NUM="1"

# Combiner system prompt et user prompt
COMBINED_PROMPT="$(cat "$WORK_DIR/temp/system-prompt-$EPIC_NUM.txt")

$(cat "$WORK_DIR/temp/prompt-sent-$EPIC_NUM.txt")"

# Utiliser la syntaxe Claude Code correcte AVEC MCP et bypass permissions
claude "$COMBINED_PROMPT" -p --output-format "json" --permission-mode "bypassPermissions"
EOF
    
    # Remplacer le num√©ro d'√©pic dynamiquement
    sed -i "s/EPIC_NUM=\"1\"/EPIC_NUM=\"$epic_number\"/g" "$WORK_DIR/temp/claude-cmd-$epic_number.sh"
    chmod +x "$WORK_DIR/temp/claude-cmd-$epic_number.sh"
    
    # Ex√©cuter Tech Lead Agent via script temporaire
    log "üîç DEBUG: D√©marrage appel Claude Code avec business context int√©gr√© (timeout 60s)"
    TECH_LEAD_RESULT=$(timeout 60 "$WORK_DIR/temp/claude-cmd-$epic_number.sh" 2> "$WORK_DIR/temp/claude-error-$epic_number.log" \
        || {
            echo "CLAUDE_TIMEOUT_OR_FAILED" > "$WORK_DIR/temp/claude-status-$epic_number.txt"
            echo "Exit code: $?" >> "$WORK_DIR/temp/claude-status-$epic_number.txt"
            echo "Timestamp: $(date)" >> "$WORK_DIR/temp/claude-status-$epic_number.txt"
            log "‚ùå Claude Code timeout/√©chec pour √©pic #$epic_number - voir temp/claude-error-$epic_number.log"
            echo "EXECUTION_ERROR"
        })
    
    # Sauvegarde et analyse du r√©sultat
    echo "$TECH_LEAD_RESULT" > "$WORK_DIR/temp/claude-result-$epic_number.txt"
    log "üîç DEBUG: Claude result length: $(echo "$TECH_LEAD_RESULT" | wc -c) characters"
    log "üîç DEBUG: Claude result preview: $(echo "$TECH_LEAD_RESULT" | head -c 100)..."
    
    # Diagnostic automatique si erreur d√©tect√©e
    if [ "$TECH_LEAD_RESULT" = "Execution error" ] || [ "$TECH_LEAD_RESULT" = "EXECUTION_ERROR" ]; then
        log "üîç DIAGNOSTIC: Execution error d√©tect√©e - d√©marrage tests en cascade"
        echo "EXECUTION_ERROR_DETECTED" > "$WORK_DIR/temp/diagnosis-$epic_number.txt"
        echo "Prompt length: $(echo "$TECH_LEAD_PROMPT" | wc -c)" >> "$WORK_DIR/temp/diagnosis-$epic_number.txt"
        echo "MCP config: $AGENTS_DIR/tech-lead.json" >> "$WORK_DIR/temp/diagnosis-$epic_number.txt"
        ls -la "$AGENTS_DIR/tech-lead.json" >> "$WORK_DIR/temp/diagnosis-$epic_number.txt"
        
        # D√©marrer tests en cascade
        run_diagnostic_cascade "$epic_number" "$TECH_LEAD_PROMPT"
    fi
    
    log "üìÑ R√©sultat analyse Tech Lead re√ßu"
    
    # Extraire le JSON du r√©sultat avec fallbacks robustes
    if WORKFLOW_JSON=$(extract_json "$TECH_LEAD_RESULT"); then
        # Cr√©er les issues GitHub r√©ellement
        UPDATED_JSON_RAW=$(create_github_issues "$WORKFLOW_JSON")
        
        # Extraire uniquement le JSON final (apr√®s les logs)
        UPDATED_JSON=$(echo "$UPDATED_JSON_RAW" | awk '/^{/ {p=1} p {print}')
        
        # Ajouter au workflow global avec les vrais num√©ros d'issues
        add_to_workflow "$epic_number" "$UPDATED_JSON"
        
        # Marquer √©pic comme analys√©e (commentaire au lieu de label inexistant)
        log "‚úÖ √âpic #$epic_number marqu√©e comme analys√©e"
        
        # Commenter sur l'√©pic
        gh issue comment "$epic_number" --repo "$ORG/$REPO" --body "ü§ñ **Tech Lead Agent - Analyse Termin√©e**

$TECH_LEAD_RESULT

---
*T√¢ches techniques cr√©√©es et ajout√©es au workflow d'orchestration automatique.*"
        
        log "‚úÖ Epic #$epic_number analys√©e et workflow mis √† jour"
    else
        log "‚ùå Erreur: impossible d'extraire le JSON du r√©sultat Tech Lead"
        # Sauvegarder r√©sultat brut pour debug
        echo "$TECH_LEAD_RESULT" > "$WORK_DIR/temp/failed-analysis-$epic_number.txt"
        
        # Marquer √©pic comme √©chou√©e
        gh issue edit "$epic_number" --repo "$ORG/$REPO" --add-label "status:analysis-failed" --add-label "needs:attention"
        gh issue comment "$epic_number" --repo "$ORG/$REPO" --body "‚ùå **Tech Lead Agent - Erreur d'Analyse**

L'extraction du plan JSON a √©chou√©. R√©sultat sauvegard√© pour investigation.

**Action requise**: V√©rification manuelle du format de r√©ponse Claude Code.

---
*Debug info sauv√© dans: temp/failed-analysis-$epic_number.txt*"
    fi
}

# === DIAGNOSTIC CASCADE ===

run_diagnostic_cascade() {
    local epic_number="$1"
    local prompt="$2"
    
    log "üîç DIAGNOSTIC CASCADE: Test Business Context MCP seul"
    
    # Cr√©er config Business Context seulement
    cat > "$WORK_DIR/temp/business-only.json" << EOF
{
  "mcpServers": {
    "business-context": {
      "command": "node",
      "args": ["/home/florian/projets/business-context-mcp/dist/index.js"]
    }
  }
}
EOF
    
    # Test 1: Business Context MCP seulement (avec timeout 30s)
    local business_result=$(timeout 30 bash -c "echo '$prompt' | GITHUB_TOKEN='$GITHUB_TOKEN' claude --print --permission-mode "bypassPermissions" \
        --mcp-config '$WORK_DIR/temp/business-only.json' \
        --allowed-tools 'business_context__*' \
        2> '$WORK_DIR/temp/business-only-error-$epic_number.log'" \
        || echo "BUSINESS_MCP_TIMEOUT")
    
    echo "$business_result" > "$WORK_DIR/temp/business-only-result-$epic_number.txt"
    log "üîç DIAGNOSTIC: Business Context result length: $(echo "$business_result" | wc -c)"
    
    # Test 2: Sans MCP du tout
    log "üîç DIAGNOSTIC CASCADE: Test sans MCP"
    local no_mcp_result=$(echo "$prompt" | GITHUB_TOKEN="$GITHUB_TOKEN" claude --print --permission-mode "bypassPermissions" \
        2> "$WORK_DIR/temp/no-mcp-error-$epic_number.log" \
        || echo "NO_MCP_FAILED")
    
    echo "$no_mcp_result" > "$WORK_DIR/temp/no-mcp-result-$epic_number.txt"
    log "üîç DIAGNOSTIC: Sans MCP result length: $(echo "$no_mcp_result" | wc -c)"
    
    # Test 3: V√©rifier les serveurs MCP
    log "üîç DIAGNOSTIC CASCADE: Test des serveurs MCP"
    echo "=== MCP SERVER TESTS ===" > "$WORK_DIR/temp/mcp-server-test-$epic_number.txt"
    
    # Test Business Context MCP accessibility
    timeout 3 node /home/florian/projets/business-context-mcp/dist/index.js > "$WORK_DIR/temp/business-mcp-test.txt" 2>&1 &
    local mcp_pid=$!
    sleep 1
    if kill -0 $mcp_pid 2>/dev/null; then
        echo "‚úÖ Business Context MCP server d√©marre correctement" >> "$WORK_DIR/temp/mcp-server-test-$epic_number.txt"
        kill $mcp_pid 2>/dev/null
    else
        echo "‚ùå Business Context MCP server failed to start" >> "$WORK_DIR/temp/mcp-server-test-$epic_number.txt"
    fi
    
    # Test GitHub MCP
    echo "Testing GitHub MCP..." >> "$WORK_DIR/temp/mcp-server-test-$epic_number.txt"
    timeout 3 npx -y @modelcontextprotocol/server-github > "$WORK_DIR/temp/github-mcp-test.txt" 2>&1 &
    local github_mcp_pid=$!
    sleep 1
    if kill -0 $github_mcp_pid 2>/dev/null; then
        echo "‚úÖ GitHub MCP server accessible" >> "$WORK_DIR/temp/mcp-server-test-$epic_number.txt"
        kill $github_mcp_pid 2>/dev/null
    else
        echo "‚ùå GitHub MCP server inaccessible" >> "$WORK_DIR/temp/mcp-server-test-$epic_number.txt"
    fi
    
    # G√©n√©rer rapport consolid√©
    generate_error_report "$epic_number" "$business_result" "$no_mcp_result"
    
    log "üìä DIAGNOSTIC TERMIN√â: Voir temp/diagnostic-report-$epic_number.md"
}

generate_error_report() {
    local epic_number="$1"
    local business_result="$2" 
    local no_mcp_result="$3"
    local report_file="$WORK_DIR/temp/diagnostic-report-$epic_number.md"
    
    cat > "$report_file" << EOF
# Rapport de Diagnostic √âpic #$epic_number

**Date:** $(date)
**√âpic:** #$epic_number

## üìä R√©sum√© des Tests

| Test | R√©sultat | Status |
|------|----------|--------|
| MCP Complet | $([ -f "$WORK_DIR/temp/claude-error-$epic_number.log" ] && echo "‚ùå √âCHEC" || echo "‚ö†Ô∏è INCONNU") | Voir claude-error-$epic_number.log |
| Business Context | $(echo "$business_result" | head -c 20)... | $([ "$business_result" = "BUSINESS_MCP_FAILED" ] && echo "‚ùå √âCHEC" || echo "‚úÖ OK") |
| Sans MCP | $(echo "$no_mcp_result" | head -c 20)... | $([ "$no_mcp_result" = "NO_MCP_FAILED" ] && echo "‚ùå √âCHEC" || echo "‚úÖ OK") |

## üîç Logs d'Erreur

### Claude Code MCP Complet
\`\`\`
$(cat "$WORK_DIR/temp/claude-error-$epic_number.log" 2>/dev/null || echo "Pas d'erreur captur√©e")
\`\`\`

### Business Context MCP  
\`\`\`
$(cat "$WORK_DIR/temp/business-only-error-$epic_number.log" 2>/dev/null || echo "Pas d'erreur")
\`\`\`

### Sans MCP
\`\`\`
$(cat "$WORK_DIR/temp/no-mcp-error-$epic_number.log" 2>/dev/null || echo "Pas d'erreur")
\`\`\`

## üîß Serveurs MCP
\`\`\`
$(cat "$WORK_DIR/temp/mcp-server-test-$epic_number.txt" 2>/dev/null || echo "Tests serveurs non disponibles")
\`\`\`

## üìÅ Fichiers G√©n√©r√©s
- prompt-sent-$epic_number.txt
- epic-data-$epic_number.json
- environment-$epic_number.txt
- claude-result-$epic_number.txt
- business-only-result-$epic_number.txt  
- no-mcp-result-$epic_number.txt

## üéØ Recommandations

$(if [ "$business_result" != "BUSINESS_MCP_FAILED" ] && [ "$business_result" != "Execution error" ]; then
    echo "‚úÖ **Business Context MCP fonctionne** - Utiliser cette config"
elif [ "$no_mcp_result" != "NO_MCP_FAILED" ] && [ "$no_mcp_result" != "Execution error" ]; then
    echo "‚ö†Ô∏è **Fallback Sans MCP requis** - MCP servers d√©faillants"
else
    echo "‚ùå **Probl√®me critique Claude Code** - Investigation approfondie requise"
fi)
EOF

    log "üìã Rapport diagnostic g√©n√©r√©: $report_file"
}

# === GESTION WORKFLOW ===

create_github_issues() {
    local workflow_json="$1"
    local updated_json="$workflow_json"
    
    # Obtenir token GitHub
    local github_token=$(get_github_token)
    if [ -z "$github_token" ]; then
        log "‚ùå Token GitHub indisponible - utilisation num√©ros fictifs"
        echo "$workflow_json" | jq '
            if .tasks_to_create then
                .tasks_created = (.tasks_to_create | map({repo: .repo, issue_number: 999, title: .title, agent: .agent})) |
                .workflow = (.workflow | map(.task_id |= gsub("-TBD"; "-999"))) |
                del(.tasks_to_create)
            else . end'
        return 0
    fi
    
    # Compter les t√¢ches √† cr√©er
    local task_count=$(echo "$workflow_json" | jq '.tasks_to_create | length // 0')
    
    if [ "$task_count" -eq 0 ]; then
        log "üîß Aucune t√¢che √† cr√©er"
        echo "$updated_json"
        return 0
    fi
    
    # ‚ö†Ô∏è VALIDATION STRICTE : Refuser plus de 2 t√¢ches par √©pic
    if [ "$task_count" -gt 2 ]; then
        log "‚ùå ERREUR: Tech Lead Agent a cr√©√© $task_count t√¢ches (>2) - VIOLATION des consignes!"
        log "‚ùå Refus de cr√©ation des issues - Tech Lead doit respecter '1 t√¢che par √©pic'"
        
        # Sauvegarder l'erreur pour diagnostic
        echo "VALIDATION_FAILED: $task_count tasks > 2 limit" > "$WORK_DIR/temp/validation-error.txt"
        echo "Timestamp: $(date)" >> "$WORK_DIR/temp/validation-error.txt"
        echo "$workflow_json" > "$WORK_DIR/temp/rejected-workflow.json"
        
        # Retourner le JSON original sans cr√©er les issues
        echo "$updated_json"
        return 1
    fi
    
    # V√©rifier que chaque t√¢che a un body d√©taill√©
    for i in $(seq 0 $((task_count-1))); do
        local body_content=$(echo "$workflow_json" | jq -r ".tasks_to_create[$i].body // \"\"")
        if [ -z "$body_content" ] || [ "$body_content" = "null" ] || [ ${#body_content} -lt 100 ]; then
            log "‚ùå ERREUR: T√¢che #$i sans body d√©taill√© (${#body_content} caract√®res < 100)"
            echo "BODY_VALIDATION_FAILED: Task $i missing detailed body" >> "$WORK_DIR/temp/validation-error.txt"
            echo "$updated_json"
            return 1
        fi
    done
    
    log "üîß Validation OK: $task_count t√¢ches avec body d√©taill√© - Cr√©ation des issues GitHub..."
    
    # Utiliser un fichier temporaire pour √©viter le bug sous-shell
    local temp_file="/tmp/issues-created-$$.json"
    echo '[]' > "$temp_file"
    
    # Traiter chaque t√¢che individuellement
    for i in $(seq 0 $((task_count-1))); do
        local task=$(echo "$workflow_json" | jq -c ".tasks_to_create[$i]")
        local repo=$(echo "$task" | jq -r '.repo')
        local title=$(echo "$task" | jq -r '.title')
        local agent=$(echo "$task" | jq -r '.agent')
        
        log "üîß Cr√©ation issue: $title dans $repo"
        
        # R√©cup√©rer le body d√©taill√© si pr√©sent
        local body_content=$(echo "$task" | jq -r '.body // ""')
        
        # Si pas de body d√©taill√©, utiliser le template par d√©faut
        if [ -z "$body_content" ] || [ "$body_content" = "null" ]; then
            body_content="**T√¢che cr√©√©e automatiquement par Tech Lead Agent**

Cette t√¢che fait partie du workflow orchestr√© Dulien.

**Agent assign√©**: $agent
**Repo**: $repo

---
*G√©n√©r√© automatiquement par l'orchestrateur Dulien*"
        else
            # Ajouter l'en-t√™te et le pied de page au body d√©taill√©
            body_content="**T√¢che cr√©√©e automatiquement par Tech Lead Agent**

Cette t√¢che fait partie du workflow orchestr√© Dulien.

**Agent assign√©**: $agent
**Repo**: $repo

## üìã Description d√©taill√©e

$body_content

---
*G√©n√©r√© automatiquement par l'orchestrateur Dulien*"
        fi
        
        # Cr√©er l'issue dans GitHub
        local issue_url=$(GITHUB_TOKEN="$github_token" gh issue create \
            --repo "mentorize-app/$repo" \
            --title "$title" \
            --body "$body_content" \
            --label "agent:$agent" \
            2>/dev/null)
        
        if [ -n "$issue_url" ]; then
            local issue_number=$(echo "$issue_url" | grep -o '[0-9]*$')
            log "‚úÖ Issue #$issue_number cr√©√©e dans $repo"
            
            # Ajouter au fichier temporaire
            jq --argjson task "{\"repo\": \"$repo\", \"issue_number\": $issue_number, \"title\": \"$title\", \"agent\": \"$agent\"}" \
                '. += [$task]' "$temp_file" > "$temp_file.tmp"
            mv "$temp_file.tmp" "$temp_file"
        else
            log "‚ùå √âchec cr√©ation issue: $title dans $repo - utilisation num√©ro fictif"
            jq --argjson task "{\"repo\": \"$repo\", \"issue_number\": 999, \"title\": \"$title\", \"agent\": \"$agent\"}" \
                '. += [$task]' "$temp_file" > "$temp_file.tmp"
            mv "$temp_file.tmp" "$temp_file"
        fi
    done
    
    # Construire le JSON final
    local tasks_created=$(cat "$temp_file")
    rm -f "$temp_file" "$temp_file.tmp"
    
    # Cr√©er le JSON de sortie simplifi√© - logique JQ complexe bugg√©e
    # Remplacer TBD par les vrais num√©ros dans une approche plus simple
    updated_json="$workflow_json"
    
    # Pour chaque t√¢che cr√©√©e, remplacer les TBD par les vrais num√©ros
    while IFS= read -r task_line; do
        local repo=$(echo "$task_line" | jq -r '.repo')
        local issue_num=$(echo "$task_line" | jq -r '.issue_number')
        
        # Remplacer dans updated_json tous les "repo-TBD" par "repo-issue_num"
        updated_json=$(echo "$updated_json" | sed "s/${repo}-TBD/${repo}-${issue_num}/g")
    done < <(echo "$tasks_created" | jq -c '.[]')
    
    # Cr√©er le JSON final simplement
    echo "{
        \"analysis\": $(echo "$workflow_json" | jq -r '.analysis // empty' | jq -R .),
        \"workflow\": $(echo "$updated_json" | jq '.workflow // []'),
        \"tasks_created\": $tasks_created
    }"
}

add_to_workflow() {
    local epic_number="$1"
    local workflow_json="$2"
    
    # Debug: v√©rifier le JSON re√ßu
    if ! echo "$workflow_json" | jq . >/dev/null 2>&1; then
        log "‚ùå JSON invalide re√ßu pour √©pic #$epic_number"
        echo "$workflow_json" > "$WORK_DIR/temp/invalid-json-$epic_number.txt"
        return 1
    fi
    
    # Cr√©er workflow.json s'il n'existe pas
    if [ ! -f "$WORKFLOW_FILE" ]; then
        echo '{"epics": {}}' > "$WORKFLOW_FILE"
    fi
    
    # Ajouter l'√©pic au workflow
    if jq --arg epic "$epic_number" --argjson workflow "$workflow_json" \
        '.epics[$epic] = $workflow' "$WORKFLOW_FILE" > "$WORKFLOW_FILE.tmp"; then
        mv "$WORKFLOW_FILE.tmp" "$WORKFLOW_FILE"
        log "üìù Workflow mis √† jour pour √©pic #$epic_number"
    else
        log "‚ùå Erreur JQ lors de la mise √† jour workflow pour √©pic #$epic_number"
        return 1
    fi
}

# === D√âTECTION PRs POUR REVIEW ===

check_prs_for_review() {
    if [ ! -f "$WORKFLOW_FILE" ]; then
        return 0
    fi
    
    log "üîç V√©rification PRs pr√™tes pour review..."
    
    # Chercher t√¢ches avec status review_requested
    REVIEW_TASKS=$(jq -r '
        .epics | to_entries[] | 
        .value.tasks_created[] as $task |
        .value.workflow[] | 
        select(.task_id == ($task.repo + "-" + ($task.issue_number | tostring))) |
        select(.status == "review_requested") |
        {task_id: .task_id, repo: $task.repo, issue: $task.issue_number, agent: $task.agent, epic: .key}
    ' "$WORKFLOW_FILE")
    
    if [ -z "$REVIEW_TASKS" ]; then
        log "üì≠ Aucune t√¢che en attente de review"
        return 0
    fi
    
    echo "$REVIEW_TASKS" | jq -c '.' | while read -r task; do
        TASK_ID=$(echo "$task" | jq -r '.task_id')
        REPO=$(echo "$task" | jq -r '.repo') 
        ISSUE=$(echo "$task" | jq -r '.issue')
        AGENT=$(echo "$task" | jq -r '.agent')
        
        log "üîç V√©rification PR pour t√¢che $TASK_ID"
        
        # Chercher PR associ√©e √† cette t√¢che
        PR_NUMBER=$(gh pr list --repo mentorize-app/$REPO --state open --json number,headRefName --jq '.[] | select(.headRefName | contains("'$TASK_ID'") or contains("alerte-test") or contains("bouton-test")) | .number' | head -1)
        
        if [ -n "$PR_NUMBER" ]; then
            log "üìã PR #$PR_NUMBER trouv√©e pour $TASK_ID - D√©clenchement review"
            
            # D√©clencher agents de review
            trigger_review_agents "$REPO" "$PR_NUMBER" "$TASK_ID"
            
            # Marquer comme en cours de review
            mark_task_status "$TASK_ID" "under_review"
        fi
    done
}

trigger_review_agents() {
    local repo="$1"
    local pr_number="$2"
    local task_id="$3"
    
    log "üöÄ D√©clenchement agents review pour PR #$pr_number"
    
    # D√©clencher Security Agent
    execute_security_review "$repo" "$pr_number" "$task_id" &
    
    # D√©clencher Tech Lead Review Agent
    execute_tech_lead_review "$repo" "$pr_number" "$task_id" &
    
    # Si webapp, d√©clencher aussi RGAA Agent  
    if [ "$repo" = "webapp" ]; then
        execute_rgaa_review "$repo" "$pr_number" "$task_id" &
    fi
    
    # Attendre que tous les agents terminent
    wait
}

# === EX√âCUTION T√ÇCHES ===

execute_mention_tasks() {
    if [ ! -f "$WORKFLOW_FILE" ]; then
        return 0
    fi
    
    log "üí¨ V√©rification t√¢ches mention en attente..."
    
    # Chercher t√¢ches mention pr√™tes √† ex√©cuter
    MENTION_TASKS=$(jq -r '
        .epics | to_entries | .[] | 
        .value.tasks_created[] as $task |
        .value.workflow[] | 
        select(.task_id == ($task.repo + "-" + ($task.issue_number | tostring))) |
        select(.status == "mention_triggered") |
        {task_id: .task_id, repo: $task.repo, issue: $task.issue_number, agent: $task.agent}
    ' "$WORKFLOW_FILE")
    
    if [ -z "$MENTION_TASKS" ]; then
        return 0
    fi
    
    echo "$MENTION_TASKS" | jq -c '.' | while read -r task; do
        TASK_ID=$(echo "$task" | jq -r '.task_id')
        REPO=$(echo "$task" | jq -r '.repo') 
        ISSUE=$(echo "$task" | jq -r '.issue')
        AGENT=$(echo "$task" | jq -r '.agent')
        
        log "üöÄ Ex√©cution t√¢che mention $TASK_ID"
        
        # R√©cup√©rer d√©tails de la t√¢che depuis GitHub
        TASK_DATA=$(gh issue view "$ISSUE" --repo "mentorize-app/$REPO" --json title,body 2>/dev/null)
        
        if [ -n "$TASK_DATA" ]; then
            case "$AGENT" in
                "webapp")
                    execute_webapp_agent "$REPO" "$ISSUE" "$TASK_DATA" "$TASK_ID"
                    ;;
                "tenant-api")
                    execute_tenant_api_agent "$REPO" "$ISSUE" "$TASK_DATA" "$TASK_ID"
                    ;;
                "referencial")
                    execute_referencial_agent "$REPO" "$ISSUE" "$TASK_DATA" "$TASK_ID"
                    ;;
                "infrastructure")
                    execute_infrastructure_agent "$REPO" "$ISSUE" "$TASK_DATA" "$TASK_ID"
                    ;;
                "mail-server")
                    execute_mail_server_agent "$REPO" "$ISSUE" "$TASK_DATA" "$TASK_ID"
                    ;;
                "landing-page")
                    execute_landing_page_agent "$REPO" "$ISSUE" "$TASK_DATA" "$TASK_ID"
                    ;;
                *)
                    log "‚ö†Ô∏è Agent mention $AGENT non support√© pour ex√©cution"
                    ;;
            esac
        fi
    done
}

execute_pending_tasks() {
    if [ ! -f "$WORKFLOW_FILE" ]; then
        return 0
    fi
    
    log "‚öôÔ∏è V√©rification t√¢ches en attente..."
    
    # Chercher t√¢ches pr√™tes √† ex√©cuter (statut pending uniquement)
    READY_TASKS=$(jq -r '
        . as $root |
        .epics | to_entries | .[] | 
        .value.tasks_created[] as $task |
        .value.workflow[] | 
        select(.task_id == ($task.repo + "-" + ($task.issue_number | tostring))) |
        select((.status // "pending") == "pending") |
        select((.depends_on // []) | length == 0 or 
               all(. as $dep | $dep | . as $dep_id | 
                   ($root.epics | .. | objects | select(.task_id? == $dep_id) | .status? == "completed"))) |
        {task_id: .task_id, repo: $task.repo, issue: $task.issue_number, agent: $task.agent, epic: (.key | tostring)}
    ' "$WORKFLOW_FILE")
    
    if [ -z "$READY_TASKS" ]; then
        log "üì≠ Aucune t√¢che pr√™te √† ex√©cuter"
        return 0
    fi
    
    echo "$READY_TASKS" | jq -c '.' | while read -r task; do
        TASK_ID=$(echo "$task" | jq -r '.task_id')
        REPO=$(echo "$task" | jq -r '.repo') 
        ISSUE=$(echo "$task" | jq -r '.issue')
        AGENT=$(echo "$task" | jq -r '.agent')
        EPIC=$(echo "$task" | jq -r '.epic')
        
        log "üöÄ Ex√©cution t√¢che $TASK_ID"
        
        # Ex√©cuter l'agent appropri√©
        execute_agent "$AGENT" "$REPO" "$ISSUE" "$TASK_ID"
    done
}

execute_agent() {
    local agent="$1"
    local repo="$2" 
    local issue="$3"
    local task_id="$4"
    
    log "ü§ñ D√©marrage agent $agent pour t√¢che $repo#$issue"
    
    # R√©cup√©rer d√©tails de la t√¢che
    TASK_DATA=$(gh issue view "$issue" --repo "$ORG/$repo" --json title,body,labels)
    
    case "$agent" in
        "webapp")
            execute_webapp_agent "$repo" "$issue" "$TASK_DATA" "$task_id"
            ;;
        "tenant-api")
            execute_api_agent "$repo" "$issue" "$TASK_DATA" "$task_id" "tenant-api"
            ;;
        "referencial")
            execute_api_agent "$repo" "$issue" "$TASK_DATA" "$task_id" "referencial"  
            ;;
        "mail-server")
            execute_mail_server_agent "$repo" "$issue" "$TASK_DATA" "$task_id"
            ;;
        "landing-page")
            execute_landing_page_agent "$repo" "$issue" "$TASK_DATA" "$task_id"
            ;;
        "infrastructure")
            execute_infrastructure_agent "$repo" "$issue" "$TASK_DATA" "$task_id"
            ;;
        "security")
            execute_security_agent "$repo" "$issue" "$TASK_DATA" "$task_id"
            ;;
        *)
            log "‚ö†Ô∏è Agent $agent non reconnu"
            ;;
    esac
}

execute_webapp_agent() {
    local repo="$1"
    local issue="$2"
    local task_data="$3"
    local task_id="$4"
    
    WEBAPP_PROMPT="T√ÇCHE: Cr√©er composant alerte-test + PR automatique

√âTAPES REQUISES:
1. Cr√©e AlerteTestComponent dans src/app/shared/components/alerte-test/
2. Code Angular 20 (@if, signals, standalone)
3. Message \"Alerte Orchestrateur\" rouge + bouton X fermer
4. Tests unitaires .spec.ts
5. git add + git commit + git push
6. UTILISE Bash pour ex√©cuter: gh pr create --title \"feat: AlerteTestComponent\" --body \"Composant cr√©√© par agent\"

IMPORTANT: Utilise l'outil Bash pour cr√©er la PR, pas MCP GitHub."

    # R√©cup√©rer le token GitHub App
    local github_token=$(get_github_token)
    if [ -z "$github_token" ]; then
        log "‚ùå Impossible de r√©cup√©rer token GitHub App"
        return 1
    fi
    
    # Ex√©cuter Webapp Agent avec token GitHub App
    WEBAPP_RESULT=$(echo "$WEBAPP_PROMPT" | GITHUB_TOKEN="$github_token" claude --print --permission-mode "bypassPermissions" \
        \
        --append-system-prompt "Tu es le Webapp Agent Dulien sp√©cialis√© Angular/TypeScript. Tu d√©veloppes des interfaces utilisateur accessibles et performantes." \
        --add-dir "/home/florian/projets/webapp" \
        --allowed-tools "Read,Write,Edit,Bash,mcp__github__*")
    
    log "üìÑ Webapp Agent termin√© pour $task_id"
    
    # Marquer comme compl√©t√© et passer en review
    mark_task_completed "$task_id" "review_requested"
    
    # Commenter sur la t√¢che
    gh issue comment "$issue" --repo "$ORG/$repo" --body "ü§ñ **Webapp Agent - D√©veloppement Termin√©**

$WEBAPP_RESULT

---
*T√¢che d√©velopp√©e automatiquement. PR cr√©√©e et en attente de review.*"
}

execute_api_agent() {
    local repo="$1"
    local issue="$2" 
    local task_data="$3"
    local task_id="$4"
    local api_type="$5"
    
    API_PROMPT="Tu es l'Agent API $api_type sp√©cialis√© NestJS/TypeScript pour Dulien.

T√ÇCHE: $repo#$issue
$(echo "$task_data" | jq -r '.title')

DESCRIPTION:
$(echo "$task_data" | jq -r '.body')

INSTRUCTIONS:
1. Analyse la t√¢che et le contexte m√©tier via Business Context MCP
2. D√©veloppe les endpoints API NestJS n√©cessaires
3. Cr√©e les entities, DTOs, controllers, services
4. Impl√©mente la validation des donn√©es et la s√©curit√©
5. Cr√©e les tests unitaires et d'int√©gration
6. Met √† jour la documentation OpenAPI
7. Cr√©e une PR avec description d√©taill√©e

IMPORTANT: Respecte les patterns NestJS et la coh√©rence avec les APIs existantes."

    # Ex√©cuter API Agent
    API_RESULT=$(echo "$API_PROMPT" | claude --print --permission-mode "bypassPermissions" \
        \
        --append-system-prompt "Tu es l'Agent API $api_type Dulien sp√©cialis√© NestJS/TypeScript. Tu d√©veloppes des APIs robustes et s√©curis√©es." \
        --add-dir "../$repo" \
        --allowed-tools "Edit,Bash,github_create_pull_request")
    
    log "üìÑ API Agent $api_type termin√© pour $task_id"
    
    # Marquer comme compl√©t√© et demander security review
    mark_task_completed "$task_id" "security_review_requested"
}

execute_security_agent() {
    local repo="$1"
    local issue="$2"
    local task_data="$3" 
    local task_id="$4"
    
    SECURITY_PROMPT="AUDIT S√âCURIT√â PR #3 - AlerteTestComponent

MISSION: Audit de s√©curit√© de la PR mentorize-app/webapp #3

ACTIONS REQUISES:
1. Utilise Bash pour: gh pr view 3 --repo mentorize-app/webapp --json files
2. Analyse les fichiers modifi√©s pour vuln√©rabilit√©s OWASP Top 10
3. V√©rifie: XSS, injection, gestion d'erreurs, donn√©es sensibles
4. V√©rifie l'accessibilit√© et la s√©curit√© frontend
5. Poste ton rapport via: gh pr comment 3 --repo mentorize-app/webapp --body \"RAPPORT_S√âCURIT√â\"

FORMAT RAPPORT:
# üîí Security Review - AlerteTestComponent
## ‚úÖ Points valid√©s
## ‚ö†Ô∏è Recommandations 
## üìã Score s√©curit√©: X/10"

    # R√©cup√©rer le token GitHub pour Security Agent  
    if [ -z "$GITHUB_TOKEN" ]; then
        export GITHUB_TOKEN=$(get_github_token)
    fi

    # Ex√©cuter Security Agent
    SECURITY_RESULT=$(echo "$SECURITY_PROMPT" | GITHUB_TOKEN="$GITHUB_TOKEN" claude --print --permission-mode "bypassPermissions" \
        \
        --append-system-prompt "Tu es le Security Agent Dulien. Tu audites la s√©curit√© du code et postes des comments sur les PRs." \
        --add-dir "/home/florian/projets/webapp" \
        --allowed-tools "Read,Bash")
    
    log "üìÑ Security Agent termin√© pour $task_id"
    
    # Marquer comme review termin√©e
    mark_task_completed "$task_id" "completed"
}

execute_mail_server_agent() {
    local repo="$1"
    local issue="$2"
    local task_data="$3"
    local task_id="$4"
    
    MAIL_PROMPT="Tu es l'Agent Mail Server sp√©cialis√© Node.js pour Dulien.

T√ÇCHE: $repo#$issue
$(echo "$task_data" | jq -r '.title')

DESCRIPTION:
$(echo "$task_data" | jq -r '.body')

INSTRUCTIONS:
1. Analyse la t√¢che et le contexte m√©tier via Business Context MCP
2. D√©veloppe les services email Node.js n√©cessaires
3. Cr√©e les templates d'emails et syst√®mes de queues
4. Impl√©mente la gestion d'erreurs et retry logic
5. Cr√©e les tests unitaires
6. Cr√©e une PR avec description d√©taill√©e

IMPORTANT: Respecte les patterns Node.js et l'architecture microservices."

    MAIL_RESULT=$(echo "$MAIL_PROMPT" | claude --print --permission-mode "bypassPermissions" \
        \
        --append-system-prompt "Tu es l'Agent Mail Server Dulien sp√©cialis√© Node.js. Tu d√©veloppes des services email robustes." \
        --add-dir "../$repo" \
        --allowed-tools "Edit,Bash,mcp__github__create_pull_request")
    
    log "üìÑ Mail Server Agent termin√© pour $task_id"
    mark_task_completed "$task_id" "review_requested"
}

execute_landing_page_agent() {
    local repo="$1"
    local issue="$2"
    local task_data="$3"
    local task_id="$4"
    
    LANDING_PROMPT="Tu es l'Agent Landing Page sp√©cialis√© Next.js pour Dulien.

T√ÇCHE: $repo#$issue
$(echo "$task_data" | jq -r '.title')

DESCRIPTION:
$(echo "$task_data" | jq -r '.body')

INSTRUCTIONS:
1. Analyse la t√¢che et le contexte m√©tier via Business Context MCP
2. D√©veloppe les pages Next.js n√©cessaires
3. Optimise pour le SEO et les performances
4. Assure la responsivit√© et l'accessibilit√©
5. Cr√©e les tests lighthouse
6. Cr√©e une PR avec description d√©taill√©e

IMPORTANT: Optimise pour conversion et performance web."

    LANDING_RESULT=$(echo "$LANDING_PROMPT" | claude --print --permission-mode "bypassPermissions" \
        \
        --append-system-prompt "Tu es l'Agent Landing Page Dulien sp√©cialis√© Next.js. Tu d√©veloppes des pages marketing performantes." \
        --add-dir "../$repo" \
        --allowed-tools "Edit,Bash,mcp__github__create_pull_request")
    
    log "üìÑ Landing Page Agent termin√© pour $task_id"
    mark_task_completed "$task_id" "review_requested"
}

execute_infrastructure_agent() {
    local repo="$1"
    local issue="$2"
    local task_data="$3"
    local task_id="$4"
    
    INFRA_PROMPT="Tu es l'Agent Infrastructure sp√©cialis√© DevOps pour Dulien.

T√ÇCHE: $repo#$issue
$(echo "$task_data" | jq -r '.title')

DESCRIPTION:
$(echo "$task_data" | jq -r '.body')

INSTRUCTIONS:
1. Analyse la t√¢che et le contexte technique
2. D√©veloppe les configurations Docker/Docker Compose
3. Configure les services de monitoring
4. Impl√©mente les scripts de d√©ploiement
5. Assure la s√©curit√© infrastructure
6. Cr√©e une PR avec description d√©taill√©e

IMPORTANT: Assure haute disponibilit√© et scalabilit√©."

    INFRA_RESULT=$(echo "$INFRA_PROMPT" | claude --print --permission-mode "bypassPermissions" \
        \
        --append-system-prompt "Tu es l'Agent Infrastructure Dulien sp√©cialis√© DevOps. Tu configures des infrastructures robustes." \
        --add-dir "../$repo" \
        --allowed-tools "Edit,Bash,mcp__github__create_pull_request")
    
    log "üìÑ Infrastructure Agent termin√© pour $task_id"
    mark_task_completed "$task_id" "review_requested"
}

mark_task_completed() {
    local task_id="$1"
    local status="$2"
    
    # Mettre √† jour le statut dans workflow.json
    jq --arg task_id "$task_id" --arg status "$status" '
        (.epics | .. | objects | select(.task_id? == $task_id) | .status) = $status
    ' "$WORKFLOW_FILE" > "$WORKFLOW_FILE.tmp"
    mv "$WORKFLOW_FILE.tmp" "$WORKFLOW_FILE"
    
    log "‚úÖ T√¢che $task_id marqu√©e comme $status"
}

mark_task_status() {
    local task_id="$1"
    local status="$2"
    
    # Mettre √† jour le statut dans workflow.json
    jq --arg task_id "$task_id" --arg status "$status" '
        (.epics | .. | objects | select(.task_id? == $task_id) | .status) = $status
    ' "$WORKFLOW_FILE" > "$WORKFLOW_FILE.tmp"
    mv "$WORKFLOW_FILE.tmp" "$WORKFLOW_FILE"
    
    log "üîÑ Statut $task_id mis √† jour: $status"
}

# === AGENTS DE REVIEW ===

execute_security_review() {
    local repo="$1"
    local pr_number="$2" 
    local task_id="$3"
    
    log "üîí Security Agent - Review PR #$pr_number"
    
    SECURITY_REVIEW_PROMPT="AUDIT S√âCURIT√â AUTOMATIQUE

MISSION: Review s√©curit√© PR mentorize-app/$repo #$pr_number

ACTIONS:
1. Utilise Bash: gh pr view $pr_number --repo mentorize-app/$repo --json files
2. Analyse vuln√©rabilit√©s OWASP Top 10 dans les fichiers modifi√©s
3. V√©rifie XSS, injection, validation input, gestion erreurs
4. Poste rapport: gh pr comment $pr_number --repo mentorize-app/$repo --body \"RAPPORT\"

FORMAT RAPPORT:
# üîí Security Review Automatique
## ‚úÖ Valid√©: [liste points OK] 
## ‚ö†Ô∏è Recommandations: [si n√©cessaire]
## üìä Score: X/10
*Review automatique par Security Agent Dulien*"

    # R√©cup√©rer token et ex√©cuter
    if [ -z "$GITHUB_TOKEN" ]; then
        export GITHUB_TOKEN=$(get_github_token)
    fi
    
    SECURITY_RESULT=$(echo "$SECURITY_REVIEW_PROMPT" | GITHUB_TOKEN="$GITHUB_TOKEN" claude --print --permission-mode "bypassPermissions" \
        \
        --append-system-prompt "Tu es le Security Agent automatique. Tu postes des reviews de s√©curit√© sur les PRs." \
        --add-dir "/home/florian/projets/$repo" \
        --allowed-tools "Read,Bash")
    
    log "üîí Security review termin√©e pour PR #$pr_number"
    echo "$SECURITY_RESULT" >> "$WORK_DIR/logs/security-reviews.log"
}

execute_tech_lead_review() {
    local repo="$1"
    local pr_number="$2" 
    local task_id="$3"
    
    log "üëî Tech Lead Agent - Review technique PR #$pr_number"
    
    TECH_LEAD_REVIEW_PROMPT="REVIEW TECHNIQUE TECH LEAD

MISSION: Review technique approfondie PR mentorize-app/$repo #$pr_number

ACTIONS:
1. Utilise Bash: gh pr view $pr_number --repo mentorize-app/$repo --json files
2. Analyse qualit√© code: architecture, patterns, conventions
3. V√©rifie conformit√© Angular 20, signals, control flow moderne
4. Contr√¥le tests unitaires, performance, maintenabilit√©
5. Poste rapport: gh pr comment $pr_number --repo mentorize-app/$repo --body \"RAPPORT\"

FORMAT RAPPORT:
# üëî Tech Lead Review - Analyse Technique
## ‚úÖ Conformit√© Technique: [points valid√©s]
## üèóÔ∏è Architecture: [√©valuation structure]
## üß™ Tests & Qualit√©: [couverture et pertinence]
## ‚ö†Ô∏è Am√©liorations: [si n√©cessaire]
## üìä Score Technique: X/10
*Review technique par Tech Lead Agent Dulien*"

    # R√©cup√©rer token et ex√©cuter
    if [ -z "$GITHUB_TOKEN" ]; then
        export GITHUB_TOKEN=$(get_github_token)
    fi
    
    TECH_LEAD_RESULT=$(echo "$TECH_LEAD_REVIEW_PROMPT" | GITHUB_TOKEN="$GITHUB_TOKEN" claude --print --permission-mode "bypassPermissions" \
        \
        --append-system-prompt "Tu es le Tech Lead Agent sp√©cialis√© qualit√© code. Tu postes des reviews techniques approfondies." \
        --add-dir "/home/florian/projets/$repo" \
        --allowed-tools "Read,Bash")
    
    log "üëî Tech Lead review termin√©e pour PR #$pr_number"
    echo "$TECH_LEAD_RESULT" >> "$WORK_DIR/logs/tech-lead-reviews.log"
}

execute_rgaa_review() {
    local repo="$1"
    local pr_number="$2"
    local task_id="$3"
    
    log "‚ôø RGAA Agent - Review accessibilit√© PR #$pr_number"
    
    RGAA_REVIEW_PROMPT="AUDIT ACCESSIBILIT√â RGAA

MISSION: Review accessibilit√© PR mentorize-app/$repo #$pr_number

ACTIONS:
1. Utilise Bash: gh pr view $pr_number --repo mentorize-app/$repo --json files
2. V√©rifie conformit√© RGAA/WCAG sur les composants Angular
3. Contr√¥le: aria-labels, focus, contraste, keyboard navigation
4. Poste rapport: gh pr comment $pr_number --repo mentorize-app/$repo --body \"RAPPORT\"

FORMAT RAPPORT:
# ‚ôø RGAA Review Automatique  
## ‚úÖ Conformit√©: [crit√®res OK]
## ‚ö†Ô∏è Am√©liorations: [si n√©cessaire] 
## üìä Score RGAA: X/10
*Review automatique par RGAA Agent Dulien*"

    # Ex√©cuter RGAA Agent
    RGAA_RESULT=$(echo "$RGAA_REVIEW_PROMPT" | GITHUB_TOKEN="$GITHUB_TOKEN" claude --print --permission-mode "bypassPermissions" \
        \
        --append-system-prompt "Tu es le RGAA Agent automatique sp√©cialis√© accessibilit√©. Tu postes des reviews RGAA sur les PRs." \
        --add-dir "/home/florian/projets/$repo" \
        --allowed-tools "Read,Bash")
    
    log "‚ôø RGAA review termin√©e pour PR #$pr_number"  
    echo "$RGAA_RESULT" >> "$WORK_DIR/logs/rgaa-reviews.log"
}

# === SYST√àME DE MENTIONS INTERACTIVES ===

# Mapping agents vers repositories
declare -A AGENT_REPOS=(
    ["webapp"]="webapp"
    ["tenant-api"]="tenant-specific-api" 
    ["referencial"]="referencial"
    ["infrastructure"]="infrastructure"
    ["mail-server"]="mail-server"
    ["landing-page"]="landing-page"
    ["security"]="webapp"  # Reviews post√©es sur webapp mais peuvent cr√©er t√¢ches ailleurs
    ["tech-lead"]="webapp"
    ["rgaa"]="webapp"
)

check_pr_mentions() {
    log "üí¨ V√©rification mentions dans commentaires PR..."
    
    # Lock file pour √©viter l'ex√©cution concurrente  
    local LOCK_FILE="$WORK_DIR/mentions.lock"
    
    # V√©rifier si un autre processus traite d√©j√† les mentions
    if [ -f "$LOCK_FILE" ]; then
        local lock_pid=$(cat "$LOCK_FILE" 2>/dev/null)
        if [ -n "$lock_pid" ] && kill -0 "$lock_pid" 2>/dev/null; then
            log "‚ö†Ô∏è Un autre processus traite d√©j√† les mentions (PID: $lock_pid)"
            return 0
        else
            log "üóëÔ∏è Suppression lock file obsol√®te"
            rm -f "$LOCK_FILE"
        fi
    fi
    
    # Cr√©er lock file avec notre PID
    echo $$ > "$LOCK_FILE"
    
    # Fonction de nettoyage appel√©e √† la sortie
    cleanup_mentions_lock() {
        rm -f "$LOCK_FILE"
        log "üîì Lock file mentions supprim√©"
    }
    trap cleanup_mentions_lock EXIT INT TERM
    
    # Cache des mentions trait√©es pour √©viter les doublons
    local PROCESSED_MENTIONS_FILE="$WORK_DIR/logs/processed-mentions.log"
    touch "$PROCESSED_MENTIONS_FILE"
    
    # Scanner toutes les PRs ouvertes sur tous les repos
    for agent in "${!AGENT_REPOS[@]}"; do
        local repo="${AGENT_REPOS[$agent]}"
        
        # R√©cup√©rer PRs ouvertes pour ce repo
        local open_prs=$(gh pr list --repo mentorize-app/$repo --state open --json number,title 2>/dev/null || echo "[]")
        
        if [ "$open_prs" != "[]" ]; then
            echo "$open_prs" | jq -c '.[]' | while read -r pr; do
                local pr_number=$(echo "$pr" | jq -r '.number')
                local pr_title=$(echo "$pr" | jq -r '.title')
                
                log "üîç Scan mentions PR mentorize-app/$repo #$pr_number"
                
                # R√©cup√©rer commentaires de la PR
                local pr_comments=$(gh pr view $pr_number --repo mentorize-app/$repo --comments 2>/dev/null || echo "")
                
                if [ -n "$pr_comments" ]; then
                    # Filtrer les commentaires de bots et ne traiter que ceux des humains
                    echo "$pr_comments" | grep -v "Dulien Orchestrator\[bot\]" | grep -v "ü§ñ.*Dulien" | while IFS= read -r line; do
                        # D√©tecter mentions uniquement des commentaires humains
                        if echo "$line" | grep -Eq "@(webapp|tenant-api|referencial|infrastructure|mail-server|landing-page|tech-lead)"; then
                            # Extraire la mention avec son contexte
                            local mention=$(echo "$line" | grep -Eo "@(webapp|tenant-api|referencial|infrastructure|mail-server|landing-page|tech-lead)[^@]*")
                            if [ -n "$mention" ]; then
                                # V√©rifier si d√©j√† trait√© (simple d√©duplication)
                                local mention_hash=$(echo "$mention$repo$pr_number" | md5sum | cut -d' ' -f1)
                                if ! grep -q "$mention_hash" "$PROCESSED_MENTIONS_FILE" 2>/dev/null; then
                                    echo "$mention_hash" >> "$PROCESSED_MENTIONS_FILE"
                                    process_mention "$mention" "$repo" "$pr_number" "$pr_title"
                                fi
                            fi
                        fi
                    done
                fi
            done
        fi
    done
}

process_mention() {
    local mention="$1"
    local source_repo="$2"  
    local source_pr="$3"
    local pr_title="$4"
    
    # Parser la mention: @agent action description
    local mentioned_agent=$(echo "$mention" | grep -Eo "@[a-z-]+" | sed 's/@//')
    local action_text=$(echo "$mention" | sed 's/@[a-z-]+\s*//')
    
    log "üí¨ Mention d√©tect√©e: @$mentioned_agent ‚Üí '$action_text'"
    
    # Logique r√©vis√©e: Correction PR vs Nouvelle T√¢che
    if [ "$mentioned_agent" = "tech-lead" ]; then
        # @tech-lead = cr√©ation nouvelle t√¢che
        log "üéØ Tech Lead: cr√©ation nouvelle t√¢che"
        create_new_task_from_tech_lead "$action_text" "$source_repo" "$source_pr" "$pr_title"
    else
        # @agent = correction de la PR courante
        log "üîß Correction PR: demande √† @$mentioned_agent"
        request_pr_correction "$mentioned_agent" "$source_repo" "$source_pr" "$action_text"
    fi
}

request_pr_correction() {
    local agent="$1"
    local source_repo="$2" 
    local source_pr="$3"
    local action_text="$4"
    
    log "üîß Demande correction PR √† @$agent"
    
    # Obtenir token GitHub App
    local github_token=$(get_github_token)
    if [ -z "$github_token" ]; then
        log "‚ùå Impossible de r√©cup√©rer token GitHub App"
        return 1
    fi
    
    # Commenter sur la PR pour demander correction
    GITHUB_TOKEN="$github_token" gh pr comment "$source_pr" --repo "mentorize-app/$source_repo" --body "üîß **Demande de Correction**

@$agent, peux-tu corriger cette PR :

**Action demand√©e:** $action_text

Cette demande concerne la PR actuelle, pas une nouvelle t√¢che.

---
*Dulien Orchestrator - Demande de correction automatique*" 2>/dev/null
    
    if [ $? -eq 0 ]; then
        log "‚úÖ Demande de correction envoy√©e √† @$agent"
    else
        log "‚ùå Erreur envoi demande correction √† @$agent"
    fi
}

create_new_task_from_tech_lead() {
    local action_text="$1"
    local source_repo="$2"
    local source_pr="$3" 
    local pr_title="$4"
    
    log "üéØ Tech Lead: analyse pour cr√©ation t√¢che"
    
    # Obtenir token GitHub App
    local github_token=$(get_github_token)
    if [ -z "$github_token" ]; then
        log "‚ùå Impossible de r√©cup√©rer token GitHub App"
        return 1
    fi
    
    # Parser le repository cible s'il est sp√©cifi√©
    local target_repo=""
    if [[ "$action_text" =~ dans[[:space:]]+([a-zA-Z-]+) ]]; then
        target_repo="${BASH_REMATCH[1]}"
        # Mapper noms courts vers noms complets
        case "$target_repo" in
            "tenant-api") target_repo="tenant-specific-api" ;;
            "webapp"|"referencial"|"infrastructure"|"mail-server"|"landing-page") ;;
            *) target_repo="" ;;  # Repo non reconnu
        esac
    fi
    
    # Si pas de repo sp√©cifi√© ou non reconnu, demander clarification
    if [ -z "$target_repo" ]; then
        GITHUB_TOKEN="$github_token" gh pr comment "$source_pr" --repo "mentorize-app/$source_repo" --body "ü§î **Tech Lead - Clarification N√©cessaire**

J'ai re√ßu la demande : \"$action_text\"

**Question :** Dans quel repository dois-je cr√©er cette t√¢che ?
- webapp (interface utilisateur Angular)
- tenant-specific-api (API backend tenant)
- referencial (API donn√©es partag√©es)
- infrastructure (DevOps, d√©ploiement)
- mail-server (service messagerie)
- landing-page (pages marketing)

Peux-tu pr√©ciser : \`@tech-lead cr√©e une t√¢che dans [REPO] pour ...\`

---
*Dulien Orchestrator - Tech Lead Agent*" 2>/dev/null
        
        log "‚ùì Tech Lead demande clarification du repository cible"
        return 0
    fi
    
    # Cr√©er l'issue dans le repository cible
    local issue_title="[TECH-LEAD] $(echo "$action_text" | cut -c1-50)..."
    local issue_body="üéØ **T√¢che cr√©√©e par Tech Lead**

**Demande originale:** $action_text

**Contexte:**
- Demand√©e depuis PR mentorize-app/$source_repo #$source_pr
- Titre PR: \"$pr_title\"
- Analys√©e et rout√©e par Tech Lead

**Instructions:**
$action_text

---
*T√¢che cr√©√©e automatiquement par Tech Lead Agent Dulien*"

    # Cr√©er l'issue GitHub
    local new_issue=$(GITHUB_TOKEN="$github_token" gh issue create \
        --repo "mentorize-app/$target_repo" \
        --title "$issue_title" \
        --body "$issue_body" 2>/dev/null)
    
    if [ $? -eq 0 ]; then
        log "‚úÖ T√¢che cr√©√©e par Tech Lead: $new_issue"
        
        # Confirmer sur la PR source
        GITHUB_TOKEN="$github_token" gh pr comment "$source_pr" --repo "mentorize-app/$source_repo" --body "üéØ **Tech Lead - T√¢che Cr√©√©e**

‚úÖ Nouvelle t√¢che cr√©√©e: $new_issue
üìÇ Repository: mentorize-app/$target_repo
ü§ñ Sera trait√©e par l'agent appropri√© dans le prochain cycle

**Action:** $action_text

---
*Tech Lead Agent - Cr√©ation de t√¢che automatique*" 2>/dev/null
        
        # Ajouter au workflow
        add_tech_lead_task_to_workflow "$target_repo" "$new_issue" "$source_repo" "$source_pr" "$action_text"
    else
        log "‚ùå Erreur cr√©ation t√¢che Tech Lead"
        
        # Signaler l'erreur
        GITHUB_TOKEN="$github_token" gh pr comment "$source_pr" --repo "mentorize-app/$source_repo" --body "‚ùå **Tech Lead - Erreur**

Impossible de cr√©er la t√¢che dans mentorize-app/$target_repo.

V√©rifiez:
- Les permissions du bot sur ce repository
- Que le repository existe
- La syntaxe de la demande

---
*Tech Lead Agent - Erreur cr√©ation t√¢che*" 2>/dev/null
    fi
}

add_tech_lead_task_to_workflow() {
    local target_repo="$1"
    local issue_url="$2"
    local source_repo="$3"
    local source_pr="$4" 
    local action_text="$5"
    
    # Extraire num√©ro d'issue de l'URL  
    local issue_number=$(echo "$issue_url" | grep -Eo '[0-9]+$')
    
    # Cr√©er entr√©e workflow pour t√¢che Tech Lead
    local epic_id="tech-lead-$(date +%s)"
    
    if [ -f "$WORKFLOW_FILE" ]; then
        # D√©terminer agent appropri√© selon le repo
        local agent=""
        case "$target_repo" in
            "webapp") agent="webapp" ;;
            "tenant-specific-api") agent="tenant-api" ;;
            "referencial") agent="referencial" ;;
            "infrastructure") agent="infrastructure" ;;
            "mail-server") agent="mail-server" ;;
            "landing-page") agent="landing-page" ;;
            *) agent="unknown" ;;
        esac
        
        # Ajouter √† workflow
        jq --arg epic_id "$epic_id" \
           --arg analysis "T√¢che cr√©√©e par Tech Lead depuis PR $source_repo #$source_pr: $action_text" \
           --arg repo "$target_repo" \
           --arg issue "$issue_number" \
           --arg title "Tech Lead: $action_text" \
           --arg agent "$agent" \
           '.epics[$epic_id] = {
               "analysis": $analysis,
               "tasks_created": [{
                   "repo": $repo,
                   "issue_number": ($issue | tonumber),
                   "title": $title,
                   "agent": $agent
               }],
               "workflow": [{
                   "task_id": ($repo + "-" + $issue),
                   "depends_on": [],
                   "priority": 1,
                   "status": "pending"
               }]
           }' "$WORKFLOW_FILE" > "$WORKFLOW_FILE.tmp"
        mv "$WORKFLOW_FILE.tmp" "$WORKFLOW_FILE"
        
        log "üìù T√¢che Tech Lead ajout√©e au workflow: $epic_id"
    fi
}

create_mention_task() {
    local agent="$1"
    local target_repo="$2" 
    local action_text="$3"
    local source_repo="$4"
    local source_pr="$5"
    local pr_title="$6"
    
    log "üéØ Cr√©ation t√¢che mention: @$agent dans $target_repo"
    
    # G√©n√©rer template selon l'agent
    local task_template
    case "$agent" in
        "webapp")
            task_template="[WEBAPP-MENTION] Interface utilisateur Angular"
            ;;
        "tenant-api")
            task_template="[API-MENTION] Backend tenant et business logic"
            ;;
        "referencial")
            task_template="[REF-MENTION] API r√©f√©rentiel donn√©es partag√©es"
            ;;
        "infrastructure")
            task_template="[INFRA-MENTION] DevOps et infrastructure"
            ;;
        "mail-server")
            task_template="[MAIL-MENTION] Service messagerie et notifications"
            ;;
        "landing-page")
            task_template="[LANDING-MENTION] Pages marketing et SEO"
            ;;
        "security"|"tech-lead"|"rgaa")
            task_template="[REVIEW-MENTION] Suivi de recommandation review"
            ;;
    esac
    
    # Corps de l'issue avec r√©f√©rence
    local issue_body="üéØ **T√¢che cr√©√©e par mention interactive**

**Action demand√©e:** $action_text

**Contexte:**
- Mentionn√© dans PR mentorize-app/$source_repo #$source_pr
- Titre PR: \"$pr_title\"
- Agent cible: @$agent

**Instructions:**
$action_text

---
*T√¢che g√©n√©r√©e automatiquement par syst√®me de mentions Dulien*
*Agent assign√©: @$agent*"

    # Cr√©er l'issue GitHub
    local new_issue=$(gh issue create \
        --repo "mentorize-app/$target_repo" \
        --title "$task_template: ${action_text:0:50}..." \
        --body "$issue_body" 2>/dev/null)
    
    if [ $? -eq 0 ]; then
        log "‚úÖ Issue cr√©√©e: $new_issue"
        
        # Ajouter au workflow JSON
        add_mention_to_workflow "$agent" "$target_repo" "$new_issue" "$source_repo" "$source_pr"
        
        # Commenter sur la PR source pour confirmer
        gh pr comment "$source_pr" --repo "mentorize-app/$source_repo" --body "ü§ñ **Mention Trait√©e**

‚úÖ T√¢che cr√©√©e automatiquement: $new_issue
üéØ Agent: @$agent 
üìÇ Repository: mentorize-app/$target_repo

La t√¢che sera trait√©e dans le prochain cycle de l'orchestrateur.

*Syst√®me de mentions interactives Dulien*" 2>/dev/null
    else
        log "‚ùå Erreur cr√©ation issue pour mention @$agent"
    fi
}

add_mention_to_workflow() {
    local agent="$1"
    local target_repo="$2"
    local issue_url="$3"
    local source_repo="$4"
    local source_pr="$5"
    
    # Extraire num√©ro d'issue de l'URL  
    local issue_number=$(echo "$issue_url" | grep -Eo '[0-9]+$')
    
    # Cr√©er entr√©e workflow pour mention
    local epic_id="mention-$(date +%s)"
    
    if [ -f "$WORKFLOW_FILE" ]; then
        # Ajouter √† workflow existant
        jq --arg epic_id "$epic_id" \
           --arg analysis "T√¢che cr√©√©e par mention @$agent depuis PR $source_repo #$source_pr" \
           --arg repo "$target_repo" \
           --arg issue "$issue_number" \
           --arg title "Mention @$agent: action demand√©e" \
           --arg agent "$agent" \
           '.epics[$epic_id] = {
               "analysis": $analysis,
               "tasks_created": [{
                   "repo": $repo,
                   "issue_number": ($issue | tonumber),
                   "title": $title,
                   "agent": $agent
               }],
               "workflow": [{
                   "task_id": ($repo + "-" + $issue),
                   "depends_on": [],
                   "priority": 2,
                   "status": "mention_triggered"
               }]
           }' "$WORKFLOW_FILE" > "$WORKFLOW_FILE.tmp"
        mv "$WORKFLOW_FILE.tmp" "$WORKFLOW_FILE"
        
        log "üìù Mention ajout√©e au workflow: $epic_id"
    fi
}

# === FINALISATION REVIEWS ===

check_completed_reviews() {
    if [ ! -f "$WORKFLOW_FILE" ]; then
        return 0
    fi
    
    log "üîç V√©rification reviews termin√©es..."
    
    # Chercher t√¢ches en cours de review
    UNDER_REVIEW_TASKS=$(jq -r '
        .epics | to_entries[] | 
        .value.tasks_created[] as $task |
        .value.workflow[] | 
        select(.task_id == ($task.repo + "-" + ($task.issue_number | tostring))) |
        select(.status == "under_review") |
        {task_id: .task_id, repo: $task.repo, issue: $task.issue_number}
    ' "$WORKFLOW_FILE")
    
    if [ -z "$UNDER_REVIEW_TASKS" ]; then
        return 0
    fi
    
    echo "$UNDER_REVIEW_TASKS" | jq -c '.' | while read -r task; do
        TASK_ID=$(echo "$task" | jq -r '.task_id')
        REPO=$(echo "$task" | jq -r '.repo')
        ISSUE=$(echo "$task" | jq -r '.issue')
        
        # V√©rifier si des reviews sont pr√©sentes sur la PR
        PR_NUMBER=$(gh pr list --repo mentorize-app/$REPO --state open --json number,headRefName --jq '.[] | select(.headRefName | contains("'$TASK_ID'") or contains("alerte-test") or contains("bouton-test")) | .number' | head -1)
        
        if [ -n "$PR_NUMBER" ]; then
            # Compter commentaires de review via gh pr view
            PR_COMMENTS=$(gh pr view $PR_NUMBER --repo mentorize-app/$REPO --comments)
            SECURITY_REVIEWS=$(echo "$PR_COMMENTS" | grep -c "Security Review Automatique" || echo "0")
            TECH_LEAD_REVIEWS=$(echo "$PR_COMMENTS" | grep -c "Tech Lead Review" || echo "0")
            RGAA_REVIEWS=$(echo "$PR_COMMENTS" | grep -c "RGAA Review Automatique" || echo "0")
            
            # V√©rifier si toutes les reviews requises sont pr√©sentes
            REQUIRED_REVIEWS_COUNT=2  # Security + Tech Lead
            if [ "$REPO" = "webapp" ]; then
                REQUIRED_REVIEWS_COUNT=3  # Security + Tech Lead + RGAA
            fi
            
            COMPLETED_REVIEWS=$((SECURITY_REVIEWS + TECH_LEAD_REVIEWS + RGAA_REVIEWS))
            
            # Si toutes reviews pr√©sentes, marquer comme pr√™t √† merge
            if [ "$COMPLETED_REVIEWS" -ge "$REQUIRED_REVIEWS_COUNT" ]; then
                log "‚úÖ Reviews compl√®tes pour $TASK_ID - Pr√™t √† merge"
                mark_task_status "$TASK_ID" "ready_to_merge"
                
                # Commentaire final sur l'issue
                # Construire message selon les reviews effectu√©es
                REVIEW_MESSAGE="‚úÖ Code d√©velopp√© par Webapp Agent\n‚úÖ PR cr√©√©e: #$PR_NUMBER\n"
                
                if [ "$SECURITY_REVIEWS" -gt 0 ]; then
                    REVIEW_MESSAGE="${REVIEW_MESSAGE}‚úÖ Review s√©curit√© termin√©e\n"
                fi
                if [ "$TECH_LEAD_REVIEWS" -gt 0 ]; then
                    REVIEW_MESSAGE="${REVIEW_MESSAGE}‚úÖ Review technique Tech Lead termin√©e\n"
                fi
                if [ "$RGAA_REVIEWS" -gt 0 ]; then
                    REVIEW_MESSAGE="${REVIEW_MESSAGE}‚úÖ Review accessibilit√© RGAA termin√©e\n"
                fi
                
                gh issue comment "$ISSUE" --repo "mentorize-app/$REPO" --body "üéâ **D√©veloppement Termin√©**

${REVIEW_MESSAGE}
**PR pr√™te √† √™tre merg√©e manuellement.**

---
*Workflow orchestrateur Dulien termin√© avec succ√®s.*"
            fi
        fi
    done
}

# === FONCTION PRINCIPALE ===

main() {
    local action="${1:-full}"
    
    case "$action" in
        "init")
            init_agents_config
            ;;
        "check-epics")
            check_new_epics
            ;;
        "execute-tasks")
            execute_pending_tasks
            ;;
        "check-prs")
            check_prs_for_review
            ;;
        "check-reviews")
            check_completed_reviews
            ;;
        "check-mentions")
            check_pr_mentions
            ;;
        "execute-mentions")
            execute_mention_tasks
            ;;
        "full")
            log "üöÄ D√©marrage cycle complet orchestrateur Dulien"
            check_new_epics
            execute_pending_tasks
            check_pr_mentions
            execute_mention_tasks
            check_prs_for_review
            check_completed_reviews
            log "‚úÖ Cycle termin√©"
            ;;
        *)
            echo "Usage: $0 [init|check-epics|execute-tasks|check-prs|check-reviews|check-mentions|execute-mentions|full]"
            exit 1
            ;;
    esac
}

# V√©rifier pr√©requis
if ! command -v claude &> /dev/null; then
    echo "‚ùå Claude Code CLI non trouv√©"
    exit 1
fi

if ! command -v gh &> /dev/null; then
    echo "‚ùå GitHub CLI non trouv√©"  
    exit 1
fi

if ! command -v jq &> /dev/null; then
    echo "‚ùå jq non trouv√©"
    exit 1
fi

# Ex√©cuter
main "$@"