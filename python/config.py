#!/usr/bin/env python3
"""
Configuration pour l'orchestrateur Dulien avec Mistral et Claude
"""

import os
from pathlib import Path

# Chemins
PROJECT_ROOT = Path(__file__).parent.parent
LOGS_DIR = PROJECT_ROOT / "logs"
CACHE_DIR = PROJECT_ROOT / "cache"

# Cr√©er les dossiers si n√©cessaire
LOGS_DIR.mkdir(exist_ok=True)
CACHE_DIR.mkdir(exist_ok=True)

# Configuration Mistral
MISTRAL_CONFIG = {
    "model": "mistral:7b",
    "options": {
        "temperature": 0.1,      # Tr√®s bas pour d√©cisions d√©terministes
        "top_p": 0.95,
        "repeat_penalty": 1.1,   # √âvite les r√©p√©titions
        "seed": 42,              # Reproductibilit√©
        "num_ctx": 8192,         # Contexte suffisant pour √©tats GitHub
        "num_predict": 1000,     # Limite de g√©n√©ration
        "stop": ["```", "\n\n"]  # Stop sur code blocks ou double newline
    }
}

# Prompts Mistral en fran√ßais
MISTRAL_PROMPTS = {
    "analyze_state": """Tu es un orchestrateur de t√¢ches GitHub expert.

√âtat actuel du syst√®me :
{state}

R√®gles de priorit√© STRICTES :
1. TOUJOURS traiter les PRs ouvertes en premier (fin du pipeline)
2. Ensuite les t√¢ches sans label 'processing'
3. En dernier les √©pics sans sous-t√¢ches

Contraintes :
- Maximum 3 actions en parall√®le
- Ne pas traiter deux fois la m√™me t√¢che
- Les t√¢ches avec label 'processing' sont d√©j√† en cours

Retourne UNIQUEMENT un JSON valide avec cette structure exacte :
{{
  "actions": [
    {{"type": "review_pr", "repo": "webapp", "number": 12, "priority": 1}},
    {{"type": "implement_task", "repo": "webapp", "number": 55, "priority": 2}},
    {{"type": "decompose_epic", "repo": "infrastructure", "number": 5, "priority": 3}}
  ],
  "reasoning": "Br√®ve explication des choix"
}}

Types d'actions possibles :
- review_pr : Reviewer et merger une PR
- implement_task : Impl√©menter une t√¢che
- decompose_epic : D√©composer un √©pic en sous-t√¢ches
- monitor_task : Surveiller une t√¢che en processing

JSON :""",

    "classify_task": """Classifie cette t√¢che GitHub.

T√¢che : {title}
Description : {body}
Labels : {labels}
√âtat : {state}
A une PR : {has_pr}

Retourne UN SEUL MOT parmi :
- implement : t√¢che √† impl√©menter (pas de label processing)
- monitor : t√¢che en cours (a le label processing)
- review : t√¢che avec PR √† reviewer
- skip : t√¢che √† ignorer

R√©ponse :""",

    "should_create_tasks": """Un √©pic n√©cessite-t-il des sous-t√¢ches ?

√âpic : {title}
Description : {body}
Cr√©√© il y a : {days_ago} jours
Sous-t√¢ches existantes : {subtask_count}

R√©ponds par OUI ou NON uniquement.

R√©ponse :"""
}

# Templates de prompts Claude
CLAUDE_PROMPTS = {
    "review_pr": """Review cette Pull Request GitHub.

Repository : {repo}
PR #{pr_number} : {title}

Instructions :
1. Utilise 'gh pr view {pr_number} --repo mentorize-app/{repo}' pour voir les d√©tails
2. V√©rifie la qualit√© du code et l'alignement avec la t√¢che originale
3. Si tout est correct : approuve avec 'gh pr review {pr_number} --approve' et merge
4. Sinon : demande des corrections avec 'gh pr review {pr_number} --request-changes'

Sois rigoureux mais constructif dans tes commentaires.""",

    "implement_task": """Impl√©mente cette t√¢che GitHub.

Repository : {repo}
T√¢che #{task_number} : {title}

Description :
{body}

Instructions STRICTES :
1. Ajoute IMM√âDIATEMENT le label 'processing' avec 'gh issue edit {task_number} --add-label processing'
2. Analyse le contexte du projet avec les MCP servers disponibles
3. Impl√©mente la solution compl√®te avec tests
4. Cr√©e une PR propre avec description d√©taill√©e
5. Ajoute le label 'status:review-requested' √† la fin

Important : Utilise les patterns et conventions existants du projet.""",

    "decompose_epic": """D√©compose cet √©pic en t√¢ches techniques concr√®tes.

Repository : {repo}
√âpic #{epic_number} : {title}

Description :
{body}

Instructions :
1. Analyse l'√©pic et identifie 3-5 t√¢ches atomiques
2. Chaque t√¢che doit √™tre :
   - Impl√©mentable ind√©pendamment
   - Testable avec crit√®res clairs
   - Estimable (quelques heures √† 2 jours max)
3. Cr√©e les issues avec 'gh issue create' en incluant :
   - Titre clair et actionnable
   - Description avec contexte et crit√®res d'acceptation
   - Label 'agent:webapp' ou 'agent:infrastructure' selon le domaine
   - R√©f√©rence √† l'√©pic parent (#{epic_number})
4. Ordonne les t√¢ches par d√©pendance logique

Ne cr√©e PAS plus de 5 t√¢ches.""",

    "monitor_task": """V√©rifie l'√©tat d'avancement de cette t√¢che.

Repository : {repo}
T√¢che #{task_number} : {title}

Cette t√¢che est marqu√©e 'processing'. V√©rifie :
1. Y a-t-il une PR ouverte li√©e ?
2. L'agent travaille-t-il toujours dessus ?
3. Y a-t-il des blocages ?

Si la t√¢che est bloqu√©e depuis plus de 2 heures :
- Retire le label 'processing'
- Ajoute un commentaire expliquant le probl√®me"""
}

# Configuration de l'orchestrateur
ORCHESTRATOR_CONFIG = {
    "loop_interval": 600,        # 10 minutes entre chaque cycle
    "max_parallel_actions": 3,    # Maximum d'actions en parall√®le
    "action_timeout": 600,        # Timeout par action (10 min)
    "retry_attempts": 2,          # Tentatives en cas d'√©chec
    "retry_delay": 30,           # D√©lai entre tentatives (secondes)
}

# Configuration des logs
LOGGING_CONFIG = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "standard": {
            "format": "[%(asctime)s] %(levelname)s [%(name)s] %(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S"
        },
        "detailed": {
            "format": "[%(asctime)s] %(levelname)s [%(name)s:%(lineno)d] %(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S"
        }
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "level": "INFO",
            "formatter": "standard",
            "stream": "ext://sys.stdout"
        },
        "file": {
            "class": "logging.handlers.RotatingFileHandler",
            "level": "DEBUG",
            "formatter": "detailed",
            "filename": str(LOGS_DIR / "orchestrator.log"),
            "maxBytes": 10485760,  # 10MB
            "backupCount": 5
        }
    },
    "loggers": {
        "": {  # Root logger
            "level": "DEBUG",
            "handlers": ["console", "file"]
        }
    }
}

# Organisation GitHub
GITHUB_CONFIG = {
    "org": "mentorize-app",
    "repos": ["webapp", "infrastructure", "tenant-api", "referential"],
    "default_labels": {
        "epic": "type:epic",
        "webapp_agent": "agent:webapp",
        "infra_agent": "agent:infrastructure",
        "techlead_agent": "agent:tech-lead",
        "processing": "processing",
        "review_requested": "status:review-requested",
        "completed": "status:completed"
    }
}

# Filtres pour ignorer certaines t√¢ches
TASK_FILTERS = {
    "ignore_old_tasks_before_number": 50,  # Ignorer les t√¢ches < #50
    "ignore_closed_without_pr_days": 7,     # Ignorer les ferm√©es sans PR depuis X jours
    "max_epic_age_days": 30,               # Ignorer les √©pics trop vieux
}

# Messages d'erreur et de statut
MESSAGES = {
    "no_actions": "‚úÖ Aucune action n√©cessaire pour le moment",
    "starting_action": "üöÄ D√©marrage action : {action_type} sur {repo}#{number}",
    "action_complete": "‚úÖ Action termin√©e : {action_type} sur {repo}#{number}",
    "action_failed": "‚ùå √âchec action : {action_type} sur {repo}#{number} - {error}",
    "cycle_start": "üîÑ D√©but du cycle d'orchestration",
    "cycle_end": "‚úÖ Fin du cycle d'orchestration"
}